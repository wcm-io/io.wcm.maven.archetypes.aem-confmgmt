# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"

# define performance parameters
CPUS = 4
MEMORY = 8192
CPUEXECUTIONCAP = 80

RSYNC_EXCLUDES = [".git/",".idea/","target/"]

HOSTNAME = "${configurationManagementName.replace('.','-')}-controlhost"
ANSIBLE_VAULT_PASS_SRC = "shared/.vault_pass"
ANSIBLE_VAULT_PASS_DEST = "/home/vagrant/.ansible/.vault_pass"

# ssh port
SSH_PORT = 22022

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  config.vm.box = "ubuntu/focal64"
  config.vm.hostname = HOSTNAME

  # forward your agent to machine
  config.ssh.forward_agent = true

  # define sync folders
  config.vm.synced_folder "../", "/home/vagrant/projects/${configurationManagementName}", create: false, type: "rsync", rsync__exclude: RSYNC_EXCLUDES, rsync__auto: true, rsync__args: ["--verbose", "--archive", "-z", "--copy-links"]

  ## Mount ~/.m2/repository directory so that your Maven settings and repository gets reused in the VM
  home_path = Vagrant::Util::Platform.windows? ? ENV['USERPROFILE'] : ENV['HOME']
  config.vm.synced_folder home_path + '/.m2/repository', '/home/vagrant/.m2/repository', type: 'virtualbox', mount_options: ["dmode=770"]

  # forwarded ports
  config.vm.network :forwarded_port, guest: 22, host: SSH_PORT, id: 'ssh'
  config.vm.network :forwarded_port, guest: 8443, host: 8443, id: 'https'
  config.vm.network :forwarded_port, guest: 8080, host: 8080, id: 'http'
  config.vm.network :forwarded_port, guest: 4502, host: 8502, id: 'aem-author'
  config.vm.network :forwarded_port, guest: 4503, host: 8503, id: 'aem-publish'

  # force auto update of VirtualBox guest additions
  config.vbguest.auto_update = true

  config.vm.provider "virtualbox" do |vb|
    # set cpu exectuion gab
    vb.customize ["modifyvm", :id, "--cpuexecutioncap", "#{CPUEXECUTIONCAP}"]

    # set cpu and memory
    vb.cpus = CPUS
    vb.memory = MEMORY

    # set vm name
    vb.name = HOSTNAME
  end

  class CredentialPrompt
    def initialize( msg )
      @msg = msg
    end
    def to_s
      begin
        system 'stty -echo'
        print @msg
        pass = URI.escape(STDIN.gets.chomp)
      ensure
        system 'stty echo'
      end
        print "\n"
      pass
    end
  end

  # read ansible vault password file when not already configured
  if !File.exist?(ANSIBLE_VAULT_PASS_SRC) && !File.exist?("shared/.provision_done")
    config.vm.provision "shell", privileged: false,
    env: {
      "FILE_PATH" => ANSIBLE_VAULT_PASS_DEST,
      "ANSIBLE_VAULT_PASSWORD" => CredentialPrompt.new("Enter the Ansible Vault Password: ")
      },
    inline: <<-SHELL
      mkdir -p `dirname $FILE_PATH`
      touch $FILE_PATH
      echo "$ANSIBLE_VAULT_PASSWORD" > $FILE_PATH
    SHELL
  end

  # reset provisioning status on destroy
  config.trigger.before :destroy do |trigger|
    trigger.info = "Deleting '.provisioning_done' file"
    trigger.run = {inline: "bash -c 'rm -f shared/.provision_done'"}
  end

  # provision as root
  config.vm.provision "shell", path: "provision-as-root.sh", privileged: true
  # provision as vagrant
  config.vm.provision "shell", path: "provision-as-vagrant.sh", privileged: false

  # provision controlhost
  config.vm.provision "ansible_local" do |ansible|
    ansible.provisioning_path = "/home/vagrant/projects/${configurationManagementName}/ansible"
    ansible.install_mode = "pip_args_only"
    ansible.pip_install_cmd = "sudo apt-get install -y python3-pip && sudo ln -s -f /usr/bin/pip3 /usr/bin/pip"
    ansible.pip_args = "-r /vagrant/pip_requirements.txt"
    # galaxy settings
    ansible.galaxy_role_file = "requirements.yml"
    ansible.galaxy_roles_path = "/home/vagrant/.ansible/roles"
    ansible.galaxy_command = "ansible-galaxy install --role-file=%{role_file} --roles-path=%{roles_path}"
    # playbook settings
    ansible.inventory_path = "inventory/local"
    ansible.playbook = "playbook-setup-controlhost.yml"
    ansible.limit = "all"
  end

end
